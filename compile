#!/bin/bash
BASEDIR=$(cd "$(dirname "$0")"; pwd)
TMPDIR=$BASEDIR/tmp
[[ "$1" == "--latest" ]] && NGINXV=nginx-1.11.5 || NGINXV=nginx-1.10.1
echo "nginx version "$NGINXV" selected" 
NGINXDIR=$NGINXV/

[[ "$1" == "--latest" ]] && PCREV=8.39 || PCREV=8.39
PCREDIR=$BASEDIR/tmp/pcre-$PCREV/

[[ "$1" == "--latest" ]] && OPENSSLV=1.1.0c || OPENSSLV=1.1.0c
OPENSSLDIR=$BASEDIR/tmp/openssl-$OPENSSLV

if [ -r $BASEDIR/bin/nginx ] ; then
  rm $BASEDIR/bin/nginx
fi

# Create and move into the tmp dirctory
mkdir -p $TMPDIR
cd $TMPDIR

# Download nginx source


if [ ! -f $NGINXV.tar.gz ]; then
	echo "Downloading nginx."
	if hash curl 2>/dev/null; then
		(curl http://nginx.org/download/$NGINXV.tar.gz --silent -o $NGINXV.tar.gz) > /dev/null
	else
		echo "curl not found, falling back to wget."
		(wget http://nginx.org/download/$NGINXV.tar.gz --quiet -O $NGINXV.tar.gz) > /dev/null
	fi
else
	echo "nginx already downloaded."
fi

# Unpack nginx source
echo "Extracting NGINX."
tar zxf ./$NGINXV.tar.gz

if [ ! -f pcre-$PCREV.tar.gz ]; then
	echo "Downloading PCRE."
	if hash curl 2>/dev/null; then
		(curl ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-$PCREV.tar.gz --silent -o pcre-$PCREV.tar.gz) > /dev/null
	else
		echo "curl not found, falling back to wget."
		(wget -q ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-$PCREV.tar.gz --quiet -O pcre-$PCREV.tar.gz) > /dev/null
	fi
else
	echo "PCRE already downloaded."
fi
echo "Extracting PCRE."
tar zxf ./pcre-$PCREV.tar.gz

if [ ! -f openssl-$OPENSSLV.tar.gz ]; then
	echo "Downloading openssl."
	if hash curl 2>/dev/null; then
		(curl https://www.openssl.org/source/openssl-$OPENSSLV.tar.gz --silent -o openssl-$OPENSSLV.tar.gz) > /dev/null
	else
		echo "curl not found, falling back to wget."
		(wget -q https://www.openssl.org/source/openssl-$OPENSSLV.tar.gz --quiet -O openssl-$OPENSSLV.tar.gz) > /dev/null
	fi
else
	echo "openssl already downloaded."
fi
echo "Extracting openssl."
tar zxf ./openssl-$OPENSSLV.tar.gz

cd ./$NGINXDIR


# Configure and make
echo "Configuring executable."
if [ "$(uname)" == "Darwin" ]; then
  export KERNEL_BITS=64
fi
./configure --with-cc-opt="-Wno-deprecated-declarations" --prefix=. --sbin-path=bin/ --conf-path=conf/nginx.conf --error-log-path=logs/error.log --http-client-body-temp-path=tmp/client_body_temp/ --http-proxy-temp-path=tmp/proxy_temp/ --http-fastcgi-temp-path=tmp/fastcgi_temp/ --http-uwsgi-temp-path=tmp/uwsgi_temp/ --http-scgi-temp-path=tmp/scgi_temp/ --with-ipv6 --with-http_ssl_module --with-http_gzip_static_module --with-http_stub_status_module --without-mail_pop3_module --without-mail_imap_module --without-mail_smtp_module --without-http_fastcgi_module \
--with-openssl=$OPENSSLDIR \
--with-openssl-opt=" --openssldir=/tmp --prefix=/tmp" \
--with-pcre=$PCREDIR --with-pcre-opt="--prefix=/tmp" 

echo "Building executable."
DESTDIR=$OPENSSLDIR/.openssl make >> ../../logs/compile.log

# Move bin file into appropriate dir
if [ ! -d $BASEDIR/bin/ ]; then
	mkdir $BASEDIR/bin
fi

cp -f objs/nginx $BASEDIR/bin/

cd $BASEDIR

# Remove the temporary directory
#echo "Cleaning up."
#rm -r $TMPDIR/$NGINXV && rm -r $TMPDIR/$NGINXV.tar.gz && rm -r $TMPDIR/pcre-$PCREV && rm -r $TMPDIR/pcre-$PCREV.tar.gz
